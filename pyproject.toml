[project]
name = "camunda-client"
version = "0.2.0"
description = ""
authors = [
    {name = "Strana Dev",email = "pypi@stranadev.ru"},
]
dependencies = [
    "pydantic>=2.5.2",
    "httpx>=0.26.0",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "Apache-2.0"}

[project.urls]
"Repository" = "https://github.com/stranadev/camunda-client"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.dev-dependencies]
dev = [
    "commitizen>=3.13.0",
    "ruff>=0.1.9",
    "black>=23.12.0",
    "mypy>=1.8.0",
    "isort>=5.13.2",
]


[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.0"
version_files = [
    "camunda_client/__init__.py",
    "pyproject.toml:version"
]


[tool.mypy]
plugins = [
  "pydantic.mypy",
]

follow_imports = "normal"
ignore_missing_imports = false
strict = true

allow_redefinition = false
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true
warn_no_return = true
warn_return_any = false
warn_unreachable = true

pretty = true
show_column_numbers = true
show_error_codes = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true

[tool.isort]
profile = "black"

[tool.ruff]
fixable = [
  "F",
  "E",
  "W",
  "I",
  "COM",
  "UP",
  "RUF",
]
ignore = [
  "E501", # Line Length
  "A003", # Class attribute ... is shadowing a python builtin
  "ANN101",
  "ANN102",
  "D", # pydocstyle
  "PD", # pandas-vet
  "INP",
  "TCH001",
  "TCH002",
  "TCH003",
  "EXE",
  "RUF001",
  "RUF002",
  "RUF003",
]
select = ["ALL"]
src = ["src", "tests"]

[tool.ruff.per-file-ignores]
"tests/*" = [
  "S101",
  "PT006", # Wrong name(s) type in `@pytest.mark.parametrize`, expected `tuple`
  "S311",
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
]
staticmethod-decorators = ["staticmethod"]

[tool.pdm.scripts]
lint = {composite = [
  "ruff check {args: .} --fix --show-fixes",
  "black {args: .}",
  "ruff check {args: .} --fix --show-fixes",
  "mypy {args: .}",
]}
test = {composite = [
  "coverage run",
  "coverage report",
]}
